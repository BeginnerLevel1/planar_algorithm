package com.huifer.planar.aset.algo.impl.concave;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.Before;
import org.junit.Test;
import org.locationtech.jts.geom.Geometry;
import org.locationtech.jts.geom.GeometryFactory;
import org.locationtech.jts.geom.Point;
import org.locationtech.jts.geom.Polygon;
import org.locationtech.jts.io.WKTReader;

public class IsConcaveTest {
    private List<Polygon> geometries = new ArrayList<>();


    @Before
    public void init()throws Exception {
        List<String> polygons = Arrays.asList(
                "POLYGON ((88064.3489745457 73720.9215322899,88064.123424185 73716.9969560137,88068.4765461465 73716.0947545709,88068.950201904 73719.1396844404,88066.8074734774 73717.4931668073,88067.348794343 73720.312546316,88065.7022767099 73718.4855883943,88066.063157287 73721.7109585523,88064.9579605196 73719.4780099814,88064.3489745457 73720.9215322899))"
//                "POLYGON ((87603.925198795 74100.4418126276,87644.1066171941 74038.4476242404,87641.8105361427 73984.489719533,87723.3214134667 73999.4142463669,87603.925198795 74100.4418126276))",
//        "POLYGON ((87812.8685744704 74115.3663394616,87848.4578307668 74054.5201916,87836.9774255099 73999.414246367,87897.8235733714 74010.8946516238,87872.5666818063 74035.0035026633,87913.8961407311 74070.5927589597,87812.8685744704 74115.3663394616))",
//        "POLYGON ((87970.1501264898 74092.4055289478,87981.6305317467 74059.1123537028,88010.331544889 74083.2212047423,87999.9991801578 74038.4476242404,87969.0020859642 74045.3358673945,87970.1501264898 74092.4055289478))",
//        "POLYGON ((88083.8061385331 74080.9251236909,88112.5071516753 74057.9643131771,88091.8424222129 74031.5593810862,88141.2081648175 74033.8554621376,88130.8758000863 74054.5201916,88141.2081648175 74079.7770831652,88083.8061385331 74080.9251236909))",
//        "POLYGON ((88213.534717936 74093.5535694735,88234.1994473984 74067.1486373826,88213.534717936 74035.0035026633,88243.3837716039 74038.4476242404,88208.9425558332 74013.1907326752,88254.8641768608 74012.0426921495,88206.6464747818 73976.4534358532,88284.7132305287 73981.0455979559,88329.4868110306 74000.5622868926,88377.7045131095 74005.1544489954,88307.6740410425 74025.8191784578,88369.6682294297 74037.2995837147,88284.7132305287 74049.9280294973,88374.2603915324 74062.5564752799,88256.0122173865 74068.2966779083,88339.8191757618 74113.0702584102,88272.0847847461 74157.8438389121,88268.640663169 74102.737893679,88229.6072852956 74125.6987041927,88250.272014758 74090.1094478964,88213.534717936 74093.5535694735))",
//        "POLYGON ((88458.0673499078 74138.3271499753,88482.1762009472 74085.5172857936,88447.7349851766 74041.8917458174,88520.061538295 74018.9309353037,88567.1311998482 74044.1878268688,88629.1253882355 74049.9280294973,88545.3184298601 74131.4389068212,88640.6057934923 74146.3634336552,88458.0673499078 74138.3271499753))",
//        "POLYGON ((88223.2930624044 73928.2357337742,88409.275627566 73797.3591138456,88219.8489408273 73912.1631664146,88222.1450218786 73727.3286417786,88543.5963690716 73685.9991828538,88591.8140711506 73840.9846538218,88223.2930624044 73928.2357337742))",
//        "POLYGON ((88670.1678370288 74001.4233172869,88711.4972959537 73918.7643994373,88798.748375906 74033.5684520062,88750.5306738271 73973.8703446703,88670.1678370288 74001.4233172869))",
//        "POLYGON ((88779.6622021665 74126.7032396527,88800.9009518918 74115.7968546587,88815.2514584629 74135.8875638582,88815.2514584629 74092.8360441449,88803.771053206 74113.5007736073,88794.5867290005 74085.9478009908,88779.6622021665 74126.7032396527))",
//        "POLYGON ((88870.3574036959 74124.9811788642,88890.4481128955 74102.5943886133,88863.4691605418 74095.7061454591,88860.5990592276 74048.062463643,88886.4299710556 74061.2649296884,88875.5235860616 74033.1379368091,88926.0373691919 74037.7300989118,88924.3153084033 74069.8752336311,88950.1462202314 74040.0261799632,88947.85013918 74125.555199127,88929.4814907689 74103.1684088761,88931.7775718203 74124.4071586014,88870.3574036959 74124.9811788642))"

        );

        for (String polygon : polygons) {
            Geometry rs = new WKTReader().read(polygon);
            Polygon polygon1 = new GeometryFactory().createPolygon(rs.getCoordinates());
            geometries.add(polygon1);
        }

    }


    @Test
    public void test() throws Exception {
//        for (Polygon polygon : geometries) {
//            List<Point> points = IsConcave.troughPoint(polygon);
//            points.forEach(s -> System.out.println(s));
//            System.out.println("==========================================================================================");
//        }

        String wl = "POLYGON ((88057.3280467987 73719.0363636017, 88057.3280467987 73718.9484615326, 88057.3280467987 73718.9484615326, 88057.3797969818 73719.0276966095, 88057.3797969818 73719.0276966095, 88057.4730167389 73718.9779834747, 88057.4730167389 73718.9779834747, 88057.3221759796 73718.8996257782, 88057.3221759796 73718.8996257782, 88057.34400410578 73718.8996257782, 88057.34400410578 73718.8996257782, 88057.4142856598 73718.8996257782, 88057.4142856598 73718.8996257782, 88057.4395008087 73718.8097667694, 88057.4395008087 73718.8097667694, 88057.3436870575 73718.8781375885, 88057.3436870575 73718.8781375885, 88057.33808355205 73718.89235887585, 88057.33808355205 73718.89235887585, 88057.3026218414 73718.8488330841, 88057.3026218414 73718.8488330841, 88057.2341899872 73718.764837265, 88057.2341899872 73718.764837265, 88057.2341899872 73718.8586025238, 88057.2341899872 73718.8586025238, 88057.1911640167 73718.768743515, 88057.1911640167 73718.768743515, 88057.1911640167 73718.8625087738, 88057.1911640167 73718.8625087738, 88057.16890758858 73718.83741481655, 88057.16890758858 73718.83741481655, 88057.1355304718 73718.8424167633, 88057.1355304718 73718.8424167633, 88057.0025119781 73718.8623485565, 88057.0025119781 73718.8623485565, 88057.1729488373 73718.8777980804, 88057.1729488373 73718.8777980804, 88057.19116587854 73718.86251087303, 88057.19116587854 73718.86251087303, 88057.22874988063 73718.90488656968, 88057.22874988063 73718.90488656968, 88057.2400493622 73718.9015750885, 88057.2400493622 73718.9015750885, 88057.1618366241 73718.9836215973, 88057.1618366241 73718.9836215973, 88057.26469184672 73718.92230393626, 88057.26469184672 73718.92230393626, 88057.2830753326 73718.9113445282, 88057.2830753326 73718.9113445282, 88057.2029056549 73718.9992465973, 88057.2029056549 73718.9992465973, 88057.3280467987 73719.0363636017))";
        Geometry rs = new WKTReader().read(wl);
        Polygon polygon1 = new GeometryFactory().createPolygon(rs.getCoordinates());
        List<Point> points = IsConcave.troughPoint(polygon1);
        System.out.println();
    }

}
